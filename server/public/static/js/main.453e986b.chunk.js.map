{"version":3,"sources":["api/apiService.js","sagas/index.js","actions/actionCreators.js","components/Editor.js","components/MessageListItem.js","components/Dashboard.js","index.js","reducers/index.js","util/localStorage.js"],"names":["checkStatus","response","status","json","then","errorMsg","hasOwnProperty","message","statusText","Error","parseJSON","text","JSON","parse","Api","fetch","concat","channelId","method","mode","options","body","watchsetChannel","watchfetchChannels","watchFetchMessages","watchPutMessage","fetchChannels","fetchMessages","putMessage","setChannel","rootSaga","regenerator_default","a","wrap","_context","prev","next","takeEvery","stop","_marked","_context2","_marked2","_context3","_marked3","_context4","_marked4","action","channels","_context5","call","API","getChannels","sent","put","type","payload","_marked5","messages","_context6","getMessages","_marked6","_action$payload","channel","_context7","_marked7","_context8","_marked8","_context9","all","_marked9","Editor","state","event","newText","target","value","this","setState","props","Object","objectSpread","react_default","createElement","onChange","changeText","bind","disabled","onClick","sendMessage","Component","MessagelListItem","_ref","ListItem_default","ListItemText_default","secondary","Dashboard","onFetchChannels","onFetchMessages","_this$props","channelListItems","map","button","key","primary","messageListItems","MessageListItem","Typography_default","variant","gutterBottom","component","List_default","Divider_default","Editor_Editor","defaultProps","connect","dispatch","bindActionCreators","sagaMiddleware","createSagaMiddleware","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","arguments","length","undefined","channelMessages","localStorage","getItem","messageList","push","newMessages","stringify","setItem","addToChannel","slice","applyMiddleware","run","ReactDOM","render","es","components_Dashboard","document","getElementById"],"mappings":"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","file":"static/js/main.453e986b.chunk.js","sourcesContent":["const API_URL = '/api'\r\n\r\nexport function checkStatus(response) {\r\n  if (response.status >= 200 && response.status < 300) {\r\n    return response\r\n  } else {\r\n    return response.json().then(json => {\r\n      const errorMsg = json.hasOwnProperty('message')\r\n        ? json.message\r\n        : response.statusText\r\n      const error = new Error(errorMsg)\r\n      throw error\r\n    })\r\n  }\r\n}\r\n\r\nexport function parseJSON(response) {\r\n  return response.text().then(text => {\r\n    return text ? JSON.parse(text) : {}\r\n  })\r\n}\r\n\r\nexport default class Api {\r\n  static getChannels() {\r\n    return fetch(`${API_URL}/channels`)\r\n      .then(checkStatus)\r\n      .then(parseJSON)\r\n  }\r\n\r\n  static getMessages(channelId) {\r\n    const options = {\r\n      method: 'GET',\r\n      mode: 'cors',\r\n    }\r\n    return fetch(`${API_URL}/messages/${channelId}`, options)\r\n      .then(checkStatus)\r\n      .then(parseJSON)\r\n  }\r\n\r\n  static putMessage(channelId, message) {\r\n    const options = {\r\n      method: 'PUT',\r\n      mode: 'cors',\r\n      body: message\r\n    }\r\n    return fetch(`${API_URL}/${channelId}`, options)\r\n      .then(checkStatus)\r\n      .then(parseJSON)\r\n  }\r\n}","import { all, put, takeEvery, call } from 'redux-saga/effects'\r\n\r\nimport API from '../api/apiService'\r\n\r\nexport function* watchsetChannel() {\r\n  yield takeEvery('SET_CHANNEL', setChannel)\r\n}\r\n\r\nexport function* watchfetchChannels() {\r\n  yield takeEvery('FETCH_CHANNELS', fetchChannels)\r\n}\r\n\r\nexport function* watchFetchMessages() {\r\n  yield takeEvery('FETCH_MESSAGES', fetchMessages)\r\n}\r\n\r\nexport function* watchPutMessage() {\r\n  yield takeEvery('PUT_MESSAGE', putMessage)\r\n}\r\n\r\nexport function* fetchChannels(action) {\r\n  const channels = yield call(API.getChannels, action)\r\n  yield put({ type: 'FETCH_CHANNELS_SUCCESS', payload: channels })\r\n}\r\n\r\nfunction* fetchMessages(action) {\r\n  const messages = yield call(API.getMessages, action.payload)\r\n  yield put({type: 'FETCH_MESSAGES_SUCCESS', payload: { messages: messages }})\r\n}\r\n\r\nfunction* putMessage(action) {\r\n  const { channel, message } = action.payload;\r\n  yield put({type: 'PUT_MESSAGE_SUCCESS', payload: {channel: channel, message: message}})\r\n  yield call(API.putMessage, channel, message)\r\n}\r\n\r\nexport function* setChannel(action) {\r\n  const channel = action.payload;\r\n  yield put({ type: 'SET_CHANNEL_SUCCESS', payload: channel })\r\n  yield put({ type: 'FETCH_MESSAGES', payload: channel })\r\n}\r\n\r\nexport default function* rootSaga() {\r\n  yield all([\r\n    watchfetchChannels(),\r\n    watchFetchMessages(),\r\n    watchPutMessage(),\r\n    watchsetChannel()\r\n  ])\r\n}","export function fetchMessages(channelId) {\r\n    return { type: 'FETCH_MESSAGES', payload: channelId };\r\n}\r\n\r\nexport function putMessage(payload) {\r\n    return { type: 'PUT_MESSAGE', payload: payload };\r\n}\r\n\r\nexport function setChannel(channel) {\r\n    return { type: 'SET_CHANNEL', payload: channel}\r\n}","import React, {Component} from 'react';\r\n\r\nexport default class Editor extends Component {\r\n  state = {\r\n    text: \"\",\r\n    channel: null,\r\n  }\r\n\r\n  changeText(event) {\r\n    const newText = event.target.value;\r\n    this.setState({text: newText});\r\n  }\r\n\r\n  sendMessage() {\r\n    const message = this.state.text\r\n    const channel = this.props.channel\r\n    this.props.putMessage({ channel: channel, message: message })\r\n    this.setState({...this.state, text: \"\"})\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          onChange={this.changeText.bind(this)}\r\n          value={this.state.text}\r\n        />\r\n        <button disabled={this.state.text === \"\"} onClick={this.sendMessage.bind(this)}>\r\n          Submit\r\n        </button>\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react'\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\nconst MessagelListItem = ({message}) => (\r\n    <ListItem>\r\n    <ListItemText secondary={message} disabled />\r\n  </ListItem>\r\n)\r\n\r\nexport default MessagelListItem\r\n","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux'\r\nimport { bindActionCreators } from 'redux';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nimport { setChannel, fetchMessages, putMessage } from '../actions/actionCreators'\r\n\r\nimport Editor from './Editor'\r\nimport MessageListItem from './MessageListItem'\r\n\r\nclass Dashboard extends Component {\r\n\r\n  componentDidMount() {\r\n    this.props.onFetchChannels()\r\n  }\r\n\r\n  getChannel(channelId) {\r\n    this.props.onFetchMessages(channelId)\r\n  }\r\n\r\n  render() {\r\n    const { setChannel, putMessage, channels, messages, channel } = this.props;\r\n    \r\n    const channelListItems = channels.map((channel) => (\r\n \r\n    <ListItem button key={channel} onClick={() => setChannel(channel)}>\r\n        <ListItemText primary={channel} />\r\n      </ListItem>\r\n    ))\r\n\r\n    const messageListItems = messages.map((message) => (\r\n      <MessageListItem message={message} />\r\n    ))\r\n    \r\n    return (\r\n      <div>\r\n        <main >\r\n          <div />\r\n          <Typography variant=\"h4\" gutterBottom component=\"h2\">\r\n          Channels\r\n          </Typography>\r\n          <Typography component=\"div\" >\r\n          <List>{channelListItems}</List>\r\n          </Typography>\r\n          <Divider />\r\n\r\n          \r\n          <Typography variant=\"h4\" gutterBottom component=\"h2\">\r\n            {`Messages ${channel || \"\"}`}\r\n          </Typography>\r\n          <Typography component=\"div\" >\r\n            <List>{messageListItems}</List>\r\n          </Typography>\r\n          <Divider />\r\n\r\n\r\n          <Typography variant=\"h4\" gutterBottom component=\"h2\">\r\n            Editor\r\n          </Typography>\r\n          <div >\r\n            <Editor channel={channel} putMessage={putMessage} />\r\n          </div>\r\n          <Divider />\r\n        </main>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nDashboard.propTypes = {\r\n  channel: PropTypes.string,\r\n  channels: PropTypes.array,\r\n  messages: PropTypes.array,\r\n  onFetchChannels: PropTypes.func\r\n};\r\nDashboard.defaultProps = {\r\n  channel: \"\",\r\n  channels: [],\r\n  messages: []\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n\r\n  const { channels, messages, channel } = state\r\n  return { channels: channels, messages: messages, channel: channel }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return bindActionCreators(\r\n    {\r\n      fetchMessages,\r\n      putMessage,\r\n      setChannel,\r\n    },\r\n    dispatch,\r\n  )\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard)","import \"babel-polyfill\"\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport { Provider } from \"react-redux\";\nimport createSagaMiddleware from 'redux-saga'\nimport reducer from './reducers'\nimport rootSaga from './sagas'\n\nimport Dashboard from './components/Dashboard'\n\nconst sagaMiddleware = createSagaMiddleware()\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducer, /* preloadedState, */ composeEnhancers(\n  applyMiddleware(sagaMiddleware)\n));\n\nsagaMiddleware.run(rootSaga)\nconst action = type => store.dispatch({type})\n\nReactDOM.render(\n  <Provider store={store}>\n  <Dashboard\n    onFetchChannels={() => action('FETCH_CHANNELS')} \n    onFetchMessages={() => action('FETCH_MESSAGES')}  \n  />\n  </Provider>,\n  document.getElementById('root')\n)","import { addToChannel } from '../util/localStorage'\r\n\r\nexport default function reducer(state = {channels: [], messages: [], channel: null}, action) {\r\n  switch (action.type) {\r\n    case 'SET_CHANNEL':\r\n      const channelId = action.payload\r\n      return { ...state, channel: channelId, messages: []  };\r\n    case 'FETCH_CHANNELS':\r\n      return state;\r\n    case 'FETCH_CHANNELS_SUCCESS':\r\n      return { ...state, channels: action.payload}\r\n    case 'FETCH_MESSAGES':\r\n      return state;\r\n    case 'FETCH_MESSAGES_SUCCESS':\r\n      return { ...state, messages: action.payload.messages }\r\n    case 'PUT_MESSAGE':\r\n      const channel = state.channel\r\n      addToChannel(channel, action.payload.message)\r\n      const newMessages = state.messages.slice();\r\n      newMessages.push(action.payload.message)\r\n      return { ...state, messages: newMessages }\r\n    case 'PUT_MESSAGE_SUCCESS':\r\n      return state;\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","export function getChannel(channelId) {\r\n    if(!channelId) return;\r\n    const channelMessages = localStorage.getItem(channelId)\r\n    const messageList = JSON.parse(channelMessages)  || []\r\n    return messageList\r\n}\r\n\r\nexport function addToChannel(channelId, message) {\r\n    if(!channelId) return;\r\n    const channelMessages = localStorage.getItem(channelId)\r\n    const messageList = JSON.parse(channelMessages) || []\r\n    messageList.push(message)\r\n    const newMessages = JSON.stringify(messageList)\r\n    localStorage.setItem(channelId, newMessages)\r\n}"],"sourceRoot":""}